import { useEffect, useState } from 'react';
import RNFS from 'react-native-fs';

/**
 * Hook sinh b·∫£ng m√†u t·ª´ file SVG colored.
 * N·∫øu kh√¥ng c√≥ SVG colored, d√πng fallback m·∫∑c ƒë·ªãnh.
 */
export function useColorPalette(coloredSvgUri?: string) {
  const [colors, setColors] = useState<string[]>([]);
  const [selectedColor, setSelectedColor] = useState<string>('#000000');

  useEffect(() => {
    const extractColorsFromSvg = async () => {
      if (!coloredSvgUri) {
        setColors(DEFAULT_COLORS);
        return;
      }

      try {
        const path = coloredSvgUri.replace('file://', '');
        const svgContent = await RNFS.readFile(path, 'utf8');

        // Regex l·∫•y t·∫•t c·∫£ fill="#xxxxxx" ho·∫∑c fill='rgb(...)'
        const fillRegex = /fill="(#[0-9A-Fa-f]{3,6}|rgb\([^)]+\))"/g;
        const matches = svgContent.match(fillRegex);

        if (matches && matches.length > 0) {
          const uniqueColors = Array.from(
            new Set(
              matches
                .map((m) => m.replace(/fill=|"/g, ''))
                .filter((c) => c !== 'none' && c !== '#fff' && c !== '#ffffff')
            )
          );
          setColors(uniqueColors.slice(0, 20)); // ch·ªâ l·∫•y t·ªëi ƒëa 12 m√†u
          setSelectedColor(uniqueColors[0]);
        } else {
          setColors(DEFAULT_COLORS);
          setSelectedColor(DEFAULT_COLORS[0]);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc m√†u t·ª´ SVG:', error);
        setColors(DEFAULT_COLORS);
      }
    };

    extractColorsFromSvg();
  }, [coloredSvgUri]);

  return { colors, selectedColor, setSelectedColor };
}

// üé® fallback m√†u m·∫∑c ƒë·ªãnh
const DEFAULT_COLORS = [
  '#E53935', // ƒë·ªè
  '#FDD835', // v√†ng
  '#43A047', // xanh l√°
  '#1E88E5', // xanh d∆∞∆°ng
  '#8E24AA', // t√≠m
  '#F48FB1', // h·ªìng
  '#A1887F', // n√¢u nh·∫°t
  '#757575', // x√°m
  '#000000', // ƒëen
  '#FFFFFF', // tr·∫Øng
];
